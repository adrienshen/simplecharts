!function(){function e(e){return!isNaN(parseFloat(e))&&isFinite(e)}function t(){var e=$("#datasets .form-control");$.each(e,function(e,t){var a=t.value.split(",");a.length>B&&(B=a.length)}),D=defaultLabels.slice(0,B)}function a(e,t){var a=z[""+e];$(".error-message"+t).text(a).removeClass("hidden"),console.log("yes!")}function o(){$(".error-message1").addClass("hidden"),$(".error-message2").addClass("hidden")}function n(e){var t=$(".type-title");t.html(e)}function l(){s(),h(),i(),r()}function i(){T=new Chart(L).Line(U,K)}function r(){I.on("click",g),$("#submit-data2").on("click",g),Z.on("click",k),j.on("click",C),$("span.chart-type").on("click",c),$("select#mobile-nav").on("change",d),$("#add-slice").on("click",v),$("#rm-slice").on("click",b)}function s(){$("<select />",{id:"mobile-nav"}).prependTo("#type-select"),$("span.chart-type a").each(function(){var e=$(this);$("<option />",{value:e.attr("href"),text:e.text()}).appendTo("#type-select select")})}function c(e,t){e.preventDefault();var a=$(this),o=$(window).width();if(o>600){console.log(A.width());var l=a.attr("data-type").toString()}if("line"===l||"bar"===l||"radar"===l||"Line"===t||"Bar"===t||"Radar"===t)H.addClass("type-hidden"),F.removeClass("type-hidden");else{H.removeClass("type-hidden"),F.addClass("type-hidden");for(var i=U.datasets.length-2,r=i;r>0;--r)C()}$("div#switch-options").empty(),"line"===l||"Line"===t?(n("Line Graph"),R=[{optionName:"scaleShowGridLines",optionText:"gridlines",checked:!0},{optionName:"bezierCurve",optionText:"bezier curves",checked:!0},{optionName:"datasetFill",optionText:"color fill",checked:!0},{optionName:"pointDot",optionText:"grid dots",checked:!0}],p()):"bar"===l||"Bar"===t?(n("Bar Graph"),R=[{optionName:"scaleShowGridLines",optionText:"gridlines",checked:!0},{optionName:"scaleBeginAtZero",optionText:"scale zero",checked:!0}],p()):"radar"===l||"Radar"===t?(n("Radar Graph"),R=[{optionName:"scaleShowLine",optionText:"scale lines",checked:!0},{optionName:"angleShowLineOut",optionText:"angle lines",checked:!0},{optionName:"scaleShowLabels",optionText:"scale labels",checked:!0},{optionName:"pointDot",optionText:"dot points",checked:!0},{optionName:"datasetStroke",optionText:"dataset strokes",checked:!0},{optionName:"datasetFill",optionText:"dataset fill",checked:!0}],p()):"pie"===l||"Pie"===t||"donut"===l||"Doughnut"===t?(("pie"===l||"Pie"===t)&&n("Pie Graph"),("donut"===l||"Doughnut"===t)&&n("Doughnut Graph"),R=[{optionName:"segmentShowStroke",optionText:"segment stroke",checked:!0},{optionName:"animateRotate",optionText:"animate rotate",checked:!1},{optionName:"animateScale",optionText:"animate scale",checked:!1}],p()):(n("Polar Graph"),R=[{optionName:"scaleShowLabelBackdrop",optionText:"scale backdrop",checked:!0},{optionName:"scaleBeginAtZero",optionText:"scale zero",checked:!0},{optionName:"scaleShowLine",optionText:"scale line",checked:!0},{optionName:"segmentShowStroke",optionText:"segment stroke",checked:!0},{optionName:"animateRotate",optionText:"animate rotate",checked:!1},{optionName:"animateScale",optionText:"animate scale",checked:!1}],p()),P="polar"===l||"Polar"===t?"PolarArea":a.text().toString()||t}function d(){var e=$("select option:selected").text();c(e)}function p(){for(var e=0;e<R.length;++e)$("<input></input>").attr({"class":"switch",id:R[e].optionName,type:"checkbox"}).prop("checked",R[e].checked).appendTo(q),$("<label></label>").attr({"class":"switch","for":R[e].optionName}).text(R[e].optionText).appendTo(q)}function h(){$(".color-select").spectrum({showPaletteOnly:!0,showPalette:!0,color:"rgba(255, 255, 255, .5)",palette:[["rgba(57, 106, 177, 1)","rgba(218, 124, 48, 1)","rgba(62, 150, 81, 1)","rgba(204, 37, 41, 1)","rgba(83, 81, 84, 1)","rgba(107, 76, 154, 1)","rgba(146, 36, 40, 1)","rgba(148, 139, 61, 1)"],["rgba(102,194,165, 1)","rgba(252,141,98, 1)","rgba(141,160,203, 1)","rgba(231,138,195, 1)","rgb(166,216,84, 1)","rgba(255,217,47, 1)","rgba(229,196,148, 1)","rgba(179,179,179, 1)"]]}),$(".color-select").removeClass("color-select").addClass("color-initialize")}function g(){L.clearRect(0,0,N,S),T&&T.clear().destroy(),o(),t(),"Line"===P||"Bar"===P||"Radar"===P?u():f(),T=new Chart(L)[P](U,K),T=new Chart(L)[P](J,K)}function u(){console.log("setting chart type 1");var t=$("#typeview1 .color-initialize");$.each(t,function(e,t){var o=t.value;return""===o?void a("color",1):(U.datasets[e].strokeColor=o,U.datasets[e].pointColor=o,U.datasets[e].pointHighlightStroke=o,o="rgba"+o.slice(3,o.length-1)+", 0.2)",void(U.datasets[e].fillColor=o))});var o=E.val().split(",");if(console.log(o.length+" "+B),""===E.val()||0===o.length)U.labels=D;else{if(o.length<B&&0!==o.length)return void a("label",1);U.labels=o}var n=$("#datasets .form-control");$.each(n,function(t,o){var n=o.value.split(",").map(function(e){return parseInt(e,10)});n.forEach(function(t,o,n){if(!e(t))throw a("wrong",1),new Error("input format error!")}),U.datasets[t].data=n}),m()}function f(){console.log("setting chart type 2");var e=$(".data-slices");$.each(e,function(e,t){var o=$(t).find(".labels").val(),n=$(t).find(".slice-data").val(),l=$(t).find(".color-initialize").val().toString();return""===o||""===n?void a("empty",2):""===l?void a("color",2):(J[e].value=parseInt(n),J[e].color=l,J[e].highlight=l,void(J[e].label=o))}),m()}function m(){currentPageOptions=$("[type=checkbox]"),$.each(currentPageOptions,function(e,t){console.log(t.id),K[t.id]=t.checked,console.log(t.checked)})}function v(e){e.preventDefault();var t={value:0,color:"",highlight:"",label:""};if(J.length>12)return void console.log("limit reached");J.push(t),console.log(J.length);var a=$("<div>",{"class":"container data-slices col-6"}),o=$("<input>",{"class":"labels col-10",type:"text"}),n=$("<input>",{"class":"slice-data col-10",type:"number"}),l=$("<input>",{"class":"color-select color2"});a.append(o).append(n).append(l),$(".data-slices").last().after(a),h(),w()}function b(e){e.preventDefault(),J.length<2||(J.pop(),console.log(J.length),$(".data-slices").last().remove(),w())}function k(e){e.preventDefault();var t=U.datasets,a={label:"",fillColor:"rgba(220,220,220,0.2)",strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:[]};if(!(t.length>=G.datasetsAllowed)){t.push(a);var o=$("<div>",{id:"","class":"container af"}),n=$("<input />",{id:"","class":"form-control added-inputs"}),l=$("<input>",{"class":"color-select color1"});o.append(n).append(l),O.append(o),h(),y()}}function C(e){e&&e.preventDefault();var t=U.datasets;if(!(t.length<=2)){t.pop();var a=$("#datasets div.container").last();a.remove(),y()}}function y(){var e=U.datasets;e.length>2&&e.length<9&&(j.removeClass("hidden"),Z.removeClass("hidden")),2===e.length&&j.addClass("hidden"),9===e.length&&Z.addClass("hidden")}function w(){var e=$("#rm-slice"),t=$("#add-slice"),a=J;a.length>2&&a.length<13&&(e.removeClass("hidden"),t.removeClass("hidden")),2===a.length&&e.addClass("hidden"),12===a.length&&t.addClass("hidden")}function x(){var e=document.getElementById("generated-chart"),t=new Image;t.src=e.toDataURL("image/png");var a=$('<a download="simplechart.png"></a>');a.attr("href",t.src),a.append(t),$("#graph-output").empty().append(a)}var T,N=800,S=500,L=document.getElementById("generated-chart").getContext("2d");defaultLabels=["a,","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","x","y","z"];var D,P="Line",B=0,G={Graph:"Radar",datasetsAllowed:9},R=[],z={empty:"sorry, the datafields can not be empty, you can remove them if not neccesary",wrong:"sorry, the datafields accept only numbers seperated by a single comma",label:"sorry, not enough labels for the datasets",color:"sorry, please set colors for each data set"};Chart.defaults.global.responsive=!1,Chart.defaults.global.onAnimationComplete=x;var F=$("#typeview1"),H=$("#typeview2"),A=$("window"),I=$("#submit-data"),E=($("#dataset1"),$("#dataset2"),$("#xlabels")),O=$("#datasets"),Z=$("#add-ds"),j=$("#rm-ds"),q=$("#switch-options"),U={labels:["label1","label2","label3","label4","label5","label6"],datasets:[{label:"",fillColor:"rgba(220,220,220,0.2)",strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#2ecc71",pointHighlightStroke:"rgba(220,220,220,1)",data:[]},{label:"",fillColor:"rgba(151,187,205,0.2)",strokeColor:"rgba(151,187,205,1)",pointColor:"rgba(151,187,205,1)",pointStrokeColor:"#fff",pointHighlightFill:"#2ecc71",pointHighlightStroke:"rgba(151,187,205,1)",data:[]}]},J=[{value:0,color:"",highlight:"",label:""},{value:0,color:"",highlight:"",label:""}],K={};return l(),{}}();
//# sourceMappingURL=data:application/json;base64,
