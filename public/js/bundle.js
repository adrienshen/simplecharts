!function(){function e(e){return!isNaN(parseFloat(e))&&isFinite(e)}function t(){var e=$("#datasets .form-control");$.each(e,function(e,t){var a=t.value.split(",");a.length>B&&(B=a.length)}),D=defaultLabels.slice(0,B)}function a(e,t){var a=z[""+e];$(".error-message"+t).text(a).removeClass("hidden"),console.log("yes!")}function o(){$(".error-message1").addClass("hidden"),$(".error-message2").addClass("hidden")}function n(e){var t=$(".type-title");t.html(e)}function l(){s(),h(),i(),r()}function i(){T=new Chart(L).Line(U,K)}function r(){I.on("click",g),$("#submit-data2").on("click",g),Z.on("click",k),j.on("click",C),$("span.chart-type").on("click",c),$("select#mobile-nav").on("change",d),$("#add-slice").on("click",v),$("#rm-slice").on("click",b)}function s(){$("<select />",{id:"mobile-nav"}).prependTo("#type-select"),$("span.chart-type a").each(function(){var e=$(this);$("<option />",{value:e.attr("href"),text:e.text()}).appendTo("#type-select select")})}function c(e,t){e.preventDefault();var a=$(this),o=$(window).width();if(o>600){console.log(A.width());var l=a.attr("data-type").toString()}if("line"===l||"bar"===l||"radar"===l||"Line"===t||"Bar"===t||"Radar"===t)H.addClass("type-hidden"),F.removeClass("type-hidden");else{H.removeClass("type-hidden"),F.addClass("type-hidden");for(var i=U.datasets.length-2,r=i;r>0;--r)C()}$("div#switch-options").empty(),"line"===l||"Line"===t?(n("Line Graph"),R=[{optionName:"scaleShowGridLines",optionText:"gridlines",checked:!0},{optionName:"bezierCurve",optionText:"bezier curves",checked:!0},{optionName:"datasetFill",optionText:"color fill",checked:!0},{optionName:"pointDot",optionText:"grid dots",checked:!0}],p()):"bar"===l||"Bar"===t?(n("Bar Graph"),R=[{optionName:"scaleShowGridLines",optionText:"gridlines",checked:!0},{optionName:"scaleBeginAtZero",optionText:"scale zero",checked:!0}],p()):"radar"===l||"Radar"===t?(n("Radar Graph"),R=[{optionName:"scaleShowLine",optionText:"scale lines",checked:!0},{optionName:"angleShowLineOut",optionText:"angle lines",checked:!0},{optionName:"scaleShowLabels",optionText:"scale labels",checked:!0},{optionName:"pointDot",optionText:"dot points",checked:!0},{optionName:"datasetStroke",optionText:"dataset strokes",checked:!0},{optionName:"datasetFill",optionText:"dataset fill",checked:!0}],p()):"pie"===l||"Pie"===t||"donut"===l||"Doughnut"===t?(("pie"===l||"Pie"===t)&&n("Pie Graph"),("donut"===l||"Doughnut"===t)&&n("Doughnut Graph"),R=[{optionName:"segmentShowStroke",optionText:"segment stroke",checked:!0},{optionName:"animateRotate",optionText:"animate rotate",checked:!1},{optionName:"animateScale",optionText:"animate scale",checked:!1}],p()):(n("Polar Graph"),R=[{optionName:"scaleShowLabelBackdrop",optionText:"scale backdrop",checked:!0},{optionName:"scaleBeginAtZero",optionText:"scale zero",checked:!0},{optionName:"scaleShowLine",optionText:"scale line",checked:!0},{optionName:"segmentShowStroke",optionText:"segment stroke",checked:!0},{optionName:"animateRotate",optionText:"animate rotate",checked:!1},{optionName:"animateScale",optionText:"animate scale",checked:!1}],p()),P="polar"===l||"Polar"===t?"PolarArea":a.text().toString()||t}function d(){var e=$("select option:selected").text();c(e)}function p(){for(var e=0;e<R.length;++e)$("<input></input>").attr({"class":"switch",id:R[e].optionName,type:"checkbox"}).prop("checked",R[e].checked).appendTo(q),$("<label></label>").attr({"class":"switch","for":R[e].optionName}).text(R[e].optionText).appendTo(q)}function h(){$(".color-select").spectrum({showPaletteOnly:!0,showPalette:!0,color:"rgba(255, 255, 255, .5)",palette:[["rgba(57, 106, 177, 1)","rgba(218, 124, 48, 1)","rgba(62, 150, 81, 1)","rgba(204, 37, 41, 1)","rgba(83, 81, 84, 1)","rgba(107, 76, 154, 1)","rgba(146, 36, 40, 1)","rgba(148, 139, 61, 1)"],["rgba(102,194,165, 1)","rgba(252,141,98, 1)","rgba(141,160,203, 1)","rgba(231,138,195, 1)","rgb(166,216,84, 1)","rgba(255,217,47, 1)","rgba(229,196,148, 1)","rgba(179,179,179, 1)"]]}),$(".color-select").removeClass("color-select").addClass("color-initialize")}function g(){L.clearRect(0,0,N,S),T&&T.clear().destroy(),o(),t(),"Line"===P||"Bar"===P||"Radar"===P?u():f(),T=new Chart(L)[P](U,K),T=new Chart(L)[P](J,K)}function u(){console.log("setting chart type 1");var t=$("#typeview1 .color-initialize");$.each(t,function(e,t){var o=t.value;return""===o?void a("color",1):(U.datasets[e].strokeColor=o,U.datasets[e].pointColor=o,U.datasets[e].pointHighlightStroke=o,o="rgba"+o.slice(3,o.length-1)+", 0.2)",void(U.datasets[e].fillColor=o))});var o=E.val().split(",");if(console.log(o.length+" "+B),""===E.val()||0===o.length)U.labels=D;else{if(o.length<B&&0!==o.length)return void a("label",1);U.labels=o}var n=$("#datasets .form-control");$.each(n,function(t,o){var n=o.value.split(",").map(function(e){return parseInt(e,10)});n.forEach(function(t,o,n){if(!e(t))throw a("wrong",1),new Error("input format error!")}),U.datasets[t].data=n}),m()}function f(){console.log("setting chart type 2");var e=$(".data-slices");$.each(e,function(e,t){var o=$(t).find(".labels").val(),n=$(t).find(".slice-data").val(),l=$(t).find(".color-initialize").val().toString();return""===o||""===n?void a("empty",2):""===l?void a("color",2):(J[e].value=parseInt(n),J[e].color=l,J[e].highlight=l,void(J[e].label=o))}),m()}function m(){currentPageOptions=$("[type=checkbox]"),$.each(currentPageOptions,function(e,t){console.log(t.id),K[t.id]=t.checked,console.log(t.checked)})}function v(e){e.preventDefault();var t={value:0,color:"",highlight:"",label:""};if(J.length>12)return void console.log("limit reached");J.push(t),console.log(J.length);var a=$("<div>",{"class":"container data-slices col-6"}),o=$("<input>",{"class":"labels col-10",type:"text"}),n=$("<input>",{"class":"slice-data col-10",type:"number"}),l=$("<input>",{"class":"color-select color2"});a.append(o).append(n).append(l),$(".data-slices").last().after(a),h(),w()}function b(e){e.preventDefault(),J.length<2||(J.pop(),console.log(J.length),$(".data-slices").last().remove(),w())}function k(e){e.preventDefault();var t=U.datasets,a={label:"",fillColor:"rgba(220,220,220,0.2)",strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:[]};if(!(t.length>=G.datasetsAllowed)){t.push(a);var o=$("<div>",{id:"","class":"container af"}),n=$("<input />",{id:"","class":"form-control added-inputs"}),l=$("<input>",{"class":"color-select color1"});o.append(n).append(l),O.append(o),h(),y()}}function C(e){e&&e.preventDefault();var t=U.datasets;if(!(t.length<=2)){t.pop();var a=$("#datasets div.container").last();a.remove(),y()}}function y(){var e=U.datasets;e.length>2&&e.length<9&&(j.removeClass("hidden"),Z.removeClass("hidden")),2===e.length&&j.addClass("hidden"),9===e.length&&Z.addClass("hidden")}function w(){var e=$("#rm-slice"),t=$("#add-slice"),a=J;a.length>2&&a.length<13&&(e.removeClass("hidden"),t.removeClass("hidden")),2===a.length&&e.addClass("hidden"),12===a.length&&t.addClass("hidden")}function x(){var e=document.getElementById("generated-chart"),t=new Image;t.src=e.toDataURL("image/png");var a=$('<a download="simplechart.png"></a>');a.attr("href",t.src),a.append(t),$("#graph-output").empty().append(a)}var T,N=800,S=500,L=document.getElementById("generated-chart").getContext("2d");defaultLabels=["a,","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","x","y","z"];var D,P="Line",B=0,G={Graph:"Radar",datasetsAllowed:9},R=[],z={empty:"sorry, the datafields can not be empty, you can remove them if not neccesary",wrong:"sorry, the datafields accept only numbers seperated by a single comma",label:"sorry, not enough labels for the datasets",color:"sorry, please set colors for each data set"};Chart.defaults.global.responsive=!1,Chart.defaults.global.onAnimationComplete=x;var F=$("#typeview1"),H=$("#typeview2"),A=$("window"),I=$("#submit-data"),E=($("#dataset1"),$("#dataset2"),$("#xlabels")),O=$("#datasets"),Z=$("#add-ds"),j=$("#rm-ds"),q=$("#switch-options"),U={labels:["label1","label2","label3","label4","label5","label6"],datasets:[{label:"",fillColor:"rgba(220,220,220,0.2)",strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#2ecc71",pointHighlightStroke:"rgba(220,220,220,1)",data:[]},{label:"",fillColor:"rgba(151,187,205,0.2)",strokeColor:"rgba(151,187,205,1)",pointColor:"rgba(151,187,205,1)",pointStrokeColor:"#fff",pointHighlightFill:"#2ecc71",pointHighlightStroke:"rgba(151,187,205,1)",data:[]}]},J=[{value:0,color:"",highlight:"",label:""},{value:0,color:"",highlight:"",label:""}],K={};return l(),{}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2UtY2hhcnQuanMiXSwibmFtZXMiOlsiaXNOdW1iZXIiLCJuIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJwcmVwQXV0b0xhYmVscyIsImRjQXJyIiwiJCIsImVhY2giLCJpbmRleCIsIml0ZW0iLCJpdGVtQXJyIiwidmFsdWUiLCJzcGxpdCIsImxlbmd0aCIsImxvbmdlc3RBcnIiLCJhdXRvTGFiZWxzIiwiZGVmYXVsdExhYmVscyIsInNsaWNlIiwicHJpbnRFcnJvck1lc3NhZ2VzIiwiZXJyb3IiLCJ2aWV3IiwiZXJyb3JUZXh0IiwiZXJyb3JNZXNzYWdlcyIsInRleHQiLCJyZW1vdmVDbGFzcyIsImNvbnNvbGUiLCJsb2ciLCJjbGVhckVycm9ycyIsImFkZENsYXNzIiwiY2hhbmdlVGl0bGUiLCJ0eXBlIiwiJHRpdGxlIiwiaHRtbCIsImFwcEluaXQiLCJtb2JpbGVOYXYiLCJjb2xvclNlbGVjdG9yIiwiaW5pdGlhbFJlbmRlciIsImV2ZW50QmluZGluZ3MiLCJuZXdDaGFydCIsIkNoYXJ0IiwiY3R4IiwiTGluZSIsInRlbXBsYXRlRGF0YSIsInRlbXBsYXRlT3B0aW9ucyIsIiRzdWJtaXREYXRhIiwib24iLCJyZW5kZXJPblN1Ym1pdCIsIiRhZGREYXRhQnRuIiwiYWRkRGF0YVNldCIsIiRybURhdGFCdG4iLCJyZW1vdmVEYXRhU2V0IiwiY2hhcnRUeXBlQ29udHJvbGxlciIsIm1vYmlsZUNoYXJ0Q3RybCIsImFkZFNsaWNlIiwicmVtb3ZlU2xpY2UiLCJpZCIsInByZXBlbmRUbyIsIiRlbCIsInRoaXMiLCJhdHRyIiwiYXBwZW5kVG8iLCJlIiwibXQiLCJwcmV2ZW50RGVmYXVsdCIsIndpbmRvd1dpZHRoIiwid2luZG93Iiwid2lkdGgiLCIkd2luZG93IiwiJGNoYXJ0VHlwZUNsaWNrZWQiLCJ0b1N0cmluZyIsIiR2aWV3MiIsIiR2aWV3MSIsIm51bVNldHNBZGRlZCIsImRhdGFzZXRzIiwiaSIsImVtcHR5Iiwib3B0aW9uc0FyciIsIm9wdGlvbk5hbWUiLCJvcHRpb25UZXh0IiwiY2hlY2tlZCIsIndyaXRlT3B0aW9ucyIsImdyYXBodHlwZSIsIm1vYmlsZVR5cGUiLCJjbGFzcyIsInByb3AiLCIkb3B0aW9uc0NvbnRhaW5lciIsImZvciIsInNwZWN0cnVtIiwic2hvd1BhbGV0dGVPbmx5Iiwic2hvd1BhbGV0dGUiLCJjb2xvciIsInBhbGV0dGUiLCJjbGVhclJlY3QiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImNsZWFyIiwiZGVzdHJveSIsInNldENoYXJ0RGF0YSIsInNldENoYXJ0RGF0YTIiLCJ0ZW1wbGF0ZURhdGEyIiwiJHNlbGVjdGVkQ29sb3JzIiwidHRlbXAiLCJzdHJva2VDb2xvciIsInBvaW50Q29sb3IiLCJwb2ludEhpZ2hsaWdodFN0cm9rZSIsImZpbGxDb2xvciIsInhsYWJlbHNBcnIiLCIkeGxhYmVscyIsInZhbCIsImxhYmVscyIsImN1ckl0ZW0iLCJtYXAiLCJwYXJzZUludCIsImZvckVhY2giLCJlbCIsImFyciIsIkVycm9yIiwiZGF0YSIsInNldE9wdGlvbnMiLCIkc2xpY2VzIiwibGFiZWxWYWwiLCJmaW5kIiwiZGF0YVZhbCIsImNvbG9yVmFsIiwiaGlnaGxpZ2h0IiwibGFiZWwiLCJjdXJyZW50UGFnZU9wdGlvbnMiLCJldnQiLCJuZXdTbGljZSIsInB1c2giLCIkZGl2IiwiJGlucHV0TGFiZWwiLCIkaW5wdXREYXRhIiwiJGNvbG9yIiwiYXBwZW5kIiwibGFzdCIsImFmdGVyIiwiZGF0YUxpbmtzU3R5bGUyIiwicG9wIiwicmVtb3ZlIiwiZHNBcnIiLCJuZXdEUyIsInBvaW50U3Ryb2tlQ29sb3IiLCJwb2ludEhpZ2hsaWdodEZpbGwiLCJDb25maWdEZWZhdWx0cyIsImRhdGFzZXRzQWxsb3dlZCIsIiRkYXRhSW5wdXREaXYiLCIkZGF0YUlucHV0RWwiLCIkZGF0YUNvbG9yU2VsZWN0IiwiJGRhdGFzZXRzIiwiZGF0YUxpbmtzU3R5bGUiLCIkbGFzdERhdGFJbnB1dHMiLCJ0ZW1wcCIsIiRybVNsaWNlIiwiJGFkZFNsaWNlIiwiY2FudmFzVG9JbWFnZSIsImdyYXBoIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJ0b0RhdGFVUkwiLCIkZG93bmxvYWQiLCJnZXRDb250ZXh0IiwiR3JhcGgiLCJ3cm9uZyIsImRlZmF1bHRzIiwiZ2xvYmFsIiwicmVzcG9uc2l2ZSIsIm9uQW5pbWF0aW9uQ29tcGxldGUiXSwibWFwcGluZ3MiOiJDQWVBLFdBcUdBLFFBQUFBLEdBQUFDLEdBQ0EsT0FBQUMsTUFBQUMsV0FBQUYsS0FBQUcsU0FBQUgsR0FJQSxRQUFBSSxLQUNBLEdBQUFDLEdBQUFDLEVBQUEsMEJBRUFBLEdBQUFDLEtBQUFGLEVBQUEsU0FBQUcsRUFBQUMsR0FDQSxHQUFBQyxHQUFBRCxFQUFBRSxNQUFBQyxNQUFBLElBQ0FGLEdBQUFHLE9BQUFDLElBQ0FBLEVBQUFKLEVBQUFHLFVBS0FFLEVBQUFDLGNBQUFDLE1BQUEsRUFBQUgsR0FJQSxRQUFBSSxHQUFBQyxFQUFBQyxHQUNBLEdBQUFDLEdBQUFDLEVBQUEsR0FBQUgsRUFDQWIsR0FBQSxpQkFBQWMsR0FBQUcsS0FBQUYsR0FBQUcsWUFBQSxVQUFBQyxRQUFBQyxJQUFBLFFBR0EsUUFBQUMsS0FDQXJCLEVBQUEsbUJBQUFzQixTQUFBLFVBQ0F0QixFQUFBLG1CQUFBc0IsU0FBQSxVQUlBLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQXpCLEVBQUEsY0FDQXlCLEdBQUFDLEtBQUFGLEdBU0EsUUFBQUcsS0FDQUMsSUFDQUMsSUFDQUMsSUFDQUMsSUFHQSxRQUFBRCxLQUNBRSxFQUFBLEdBQUFDLE9BQUFDLEdBQUFDLEtBQUFDLEVBQUFDLEdBR0EsUUFBQU4sS0FFQU8sRUFBQUMsR0FBQSxRQUFBQyxHQUNBeEMsRUFBQSxpQkFBQXVDLEdBQUEsUUFBQUMsR0FHQUMsRUFBQUYsR0FBQSxRQUFBRyxHQUNBQyxFQUFBSixHQUFBLFFBQUFLLEdBR0E1QyxFQUFBLG1CQUFBdUMsR0FBQSxRQUFB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LEdBQ0FwQixVQUFBLHdCQUNBSCxZQUFBLHNCQUNBQyxXQUFBLHNCQUNBdUMsaUJBQUEsT0FDQUMsbUJBQUEsVUFDQXZDLHFCQUFBLHNCQUNBYSxVQUdBUSxNQUFBLEdBQ0FwQixVQUFBLHdCQUNBSCxZQUFBLHNCQUNBQyxXQUFBLHNCQUNBdUMsaUJBQUEsT0FDQUMsbUJBQUEsVUFDQXZDLHFCQUFBLHNCQUNBYSxXQU9BbEIsSUFFQXhGLE1BQUEsRUFDQStFLE1BQUEsR0FDQWtDLFVBQUEsR0FDQUMsTUFBQSxLQUdBbEgsTUFBQSxFQUNBK0UsTUFBQSxHQUNBa0MsVUFBQSxHQUNBQyxNQUFBLEtBS0FsRixJQThnQkEsT0FGQVYiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogIEdvYWxzIHRvZGF5XG5cbk1ham9yIHRoaW5ncyBsZWZ0IHRvIGRvOlxuICA0LiBBcHAgY29tcGxldGUgLSBjaGVjayBmb3IgZXJyb3JzXG5cblxuVGhpbmdzIGJlaW5nIGNvbXBsZXRlZCB0b2RheTpcblxuXG5cblxuKi9cblxuLy9tb2R1bGFyIHBhdHRlcm4gdXNpbmcgYSBzaWYgcmV2ZWFsaW5nIHB1YmxpYyBtZXRob2RzIHRvIHRoZSBnbG9iYWwgc2NvcGVcbiAgLy9cbihmdW5jdGlvbigpIHtcbiAgLy9hc3NpZ25pbmcgc29tZSB1c2VmdWwgdmFyaWFibGVzXG5cdHZhciBjYW52YXNXaWR0aCA9IDgwMCwgY2FudmFzSGVpZ2h0ID0gNTAwO1xuXHR2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dlbmVyYXRlZC1jaGFydCcpLmdldENvbnRleHQoJzJkJyk7XG5cdHZhciBuZXdDaGFydCwgZGF0YTtcbiAgXG4gIC8qIFJlZ2V4IFBhdHRlcm5zICovXG4gIHZhciBkc1BhdHRlcm4gPSAvKFxcZCsoLCkqXFxzKikrL2dpO1xuICBkZWZhdWx0TGFiZWxzID0gWydhLCcsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JywgJ3UnLCAndicsICd4JywgJ3knLCAneiddO1xuICB2YXIgYXV0b0xhYmVscztcbiAgXG4gIHZhciBncmFwaHR5cGUgPSAnTGluZSc7IC8vIHRoZSBkZWZhdWx0IGdyYXBoIHR5cGVcbiAgdmFyIGxvbmdlc3RBcnIgPSAwO1xuICBcbiAgdmFyIENvbmZpZ0RlZmF1bHRzID0ge1xuICAgIEdyYXBoOiAnUmFkYXInLFxuICAgIGRhdGFzZXRzQWxsb3dlZDogOVxuICAgIC8vLi4uXG4gIH07XG4gIFxuICB2YXIgb3B0aW9uc0FyciA9IFtdO1xuICBcbiAgdmFyIGVycm9yTWVzc2FnZXMgPSB7XG4gICAgZW1wdHk6ICdzb3JyeSwgdGhlIGRhdGFmaWVsZHMgY2FuIG5vdCBiZSBlbXB0eSwgeW91IGNhbiByZW1vdmUgdGhlbSBpZiBub3QgbmVjY2VzYXJ5JyxcbiAgICB3cm9uZzogJ3NvcnJ5LCB0aGUgZGF0YWZpZWxkcyBhY2NlcHQgb25seSBudW1iZXJzIHNlcGVyYXRlZCBieSBhIHNpbmdsZSBjb21tYScsXG4gICAgbGFiZWw6ICdzb3JyeSwgbm90IGVub3VnaCBsYWJlbHMgZm9yIHRoZSBkYXRhc2V0cycsXG4gICAgY29sb3I6ICdzb3JyeSwgcGxlYXNlIHNldCBjb2xvcnMgZm9yIGVhY2ggZGF0YSBzZXQnXG4gIH07XG4gIFxuICAvL3NldHRpbmcgY2hhcnQgZ2xvYmFsIGRlZmF1bHQgb3B0aW9uc1xuICBDaGFydC5kZWZhdWx0cy5nbG9iYWwucmVzcG9uc2l2ZT0gZmFsc2U7XG4gIENoYXJ0LmRlZmF1bHRzLmdsb2JhbC5vbkFuaW1hdGlvbkNvbXBsZXRlPSBjYW52YXNUb0ltYWdlO1xuICAvL1xuICBcbiAgLy9jYWNoZSBKUXVlcnkgRE9NIGVsZW1lbnRzXG4gIHZhciAkdmlldzEgICAgICA9ICQoJyN0eXBldmlldzEnKSxcbiAgICAgICR2aWV3MiAgICAgID0gJCgnI3R5cGV2aWV3MicpO1xuICBcbiAgdmFyICR3aW5kb3cgICAgID0gJCgnd2luZG93JyksXG4gICAgICAkc3VibWl0RGF0YSA9ICQoJyNzdWJtaXQtZGF0YScpLFxuICAgICAgJGRhdGFTZXQxICAgPSAkKCcjZGF0YXNldDEnKSxcbiAgICAgICRkYXRhU2V0MiAgID0gJCgnI2RhdGFzZXQyJyksXG4gICAgICAkeGxhYmVscyAgICA9ICQoJyN4bGFiZWxzJyksXG4gICAgICAkZGF0YXNldHMgICA9ICQoJyNkYXRhc2V0cycpO1xuICAvL2FkZCwgcmVtb3ZlIGRhdGFzZXQgbGlua3NcbiAgdmFyICRhZGREYXRhQnRuID0gJCgnI2FkZC1kcycpO1xuXHR2YXIgJHJtRGF0YUJ0biAgPSAkKCcjcm0tZHMnKTtcbiAgdmFyICRvcHRpb25zQ29udGFpbmVyID0gJCgnI3N3aXRjaC1vcHRpb25zJyk7XG4gIFxuICAvLyBUaGUgdHlwZSBvZiBjaGFydCBjbGlja2VkIGFuZCBkaXNwbGF5IG9uIHRoZSB1c2VyIHNjcmVlblxuICB2YXIgJGNoYXJ0VHlwZUNsaWNrZWQgPSBcIlwiO1xuICBcbiAgLy9UaGlzIGlzIHRoZSBmaXJzdCBkYXRhIHRlbXBsYXRlIGZvciBMaW5lLCBCYXIsIFJhZGFyIGNoYXJ0c1xuXHR2YXIgdGVtcGxhdGVEYXRhID0ge1xuXHQgICAgbGFiZWxzOiBbJ2xhYmVsMScsICdsYWJlbDInLCAnbGFiZWwzJywgJ2xhYmVsNCcsICdsYWJlbDUnLCAnbGFiZWw2J10sXG5cdCAgICBkYXRhc2V0czogW1xuXHQgICAgICAgIHtcblx0ICAgICAgICAgIGxhYmVsOiAnJyxcbiAgICAgICAgICAgIGZpbGxDb2xvcjogXCJyZ2JhKDIyMCwyMjAsMjIwLDAuMilcIixcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBcInJnYmEoMjIwLDIyMCwyMjAsMSlcIixcbiAgICAgICAgICAgIHBvaW50Q29sb3I6IFwicmdiYSgyMjAsMjIwLDIyMCwxKVwiLFxuICAgICAgICAgICAgcG9pbnRTdHJva2VDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgICBwb2ludEhpZ2hsaWdodEZpbGw6IFwiIzJlY2M3MVwiLFxuICAgICAgICAgICAgcG9pbnRIaWdobGlnaHRTdHJva2U6IFwicmdiYSgyMjAsMjIwLDIyMCwxKVwiLFxuICAgICAgICAgICAgZGF0YTogW11cblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiBcIlwiLFxuICAgICAgICAgICAgZmlsbENvbG9yOiBcInJnYmEoMTUxLDE4NywyMDUsMC4yKVwiLFxuICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFwicmdiYSgxNTEsMTg3LDIwNSwxKVwiLFxuICAgICAgICAgICAgcG9pbnRDb2xvcjogXCJyZ2JhKDE1MSwxODcsMjA1LDEpXCIsXG4gICAgICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiBcIiNmZmZcIixcbiAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0RmlsbDogXCIjMmVjYzcxXCIsXG4gICAgICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogXCJyZ2JhKDE1MSwxODcsMjA1LDEpXCIsXG4gICAgICAgICAgICBkYXRhOiBbXVxuXHQgICAgICAgIH1cblx0ICAgIF1cblx0fTtcbiAgLy9ub3RlOiB0ZW1wbGF0ZURhdGFbJ2RhdGFzZXRzJ11baV1bJ2RhdGEnXSAvL3RlbXBsYXRlRGF0YVsnbGFiZWxzJ107XG4gIFxuICAvLyBUaGlzIGlzIHRoZSBzZWNvbmQgdHlwZSBvZiBkYXRhIHRlbXBsYXRlIGZvciBQaWUsIERvbnV0LCBhbmQgUG9sYXIgY2hhcnRzXG4gIHZhciB0ZW1wbGF0ZURhdGEyID0gW1xuICAgIHtcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIGNvbG9yOlwiXCIsXG4gICAgICAgIGhpZ2hsaWdodDogXCJcIixcbiAgICAgICAgbGFiZWw6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIGNvbG9yOlwiXCIsXG4gICAgICAgIGhpZ2hsaWdodDogXCJcIixcbiAgICAgICAgbGFiZWw6IFwiXCJcbiAgICB9XG4gIF07XG4gIFxuXHQvL01hc3RlciBvcHRpb25zIHRlbXBsYXRlIGZvciBhbGwgdGhlIGNoYXJ0cyB0eXBlcyB1c2UgdGhpcyBvYmplY3Rcblx0dmFyIHRlbXBsYXRlT3B0aW9ucyA9IHt9O1xuICBcbiAgLyogSGVscGVyIEZ1bmN0aW9ucyAqL1xuXG4gIGZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xuICB9XG5cdFxuICAvLyBkZXRlcm1pbmVzIHdoYXQgdHlwZTEgY2hhcnQgZGF0YXNldCBpcyB0aGUgbG9uZ2VzdCBsZW5ndGhcbiAgZnVuY3Rpb24gcHJlcEF1dG9MYWJlbHMoKSB7ICAgICAgICAgICAgXG4gICAgdmFyIGRjQXJyID0gJCgnI2RhdGFzZXRzIC5mb3JtLWNvbnRyb2wnKTtcbiAgICBcbiAgICAkLmVhY2goZGNBcnIsIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG4gICAgICB2YXIgaXRlbUFyciA9IGl0ZW0udmFsdWUuc3BsaXQoJywnKTtcbiAgICAgIGlmICggaXRlbUFyci5sZW5ndGggPiBsb25nZXN0QXJyICkge1xuICAgICAgICBsb25nZXN0QXJyID0gaXRlbUFyci5sZW5ndGg7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ2xvbmdlc3QgbGVuIHNvIGZhciBpczogJysgbG9uZ2VzdEFycik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gZ2VuZXJhdGVzIGEgc2V0IG9mIGF1dG8gbGFiZWxzIGJhc2VkIG9uIHRoZSBsb25nZXN0IGRhdGVzZXRcbiAgICAgIGF1dG9MYWJlbHMgPSBkZWZhdWx0TGFiZWxzLnNsaWNlKDAsIGxvbmdlc3RBcnIpO1xuICB9XG4gIFxuICAvLyBjaGFydCBlcnJvciBoYW5kbGluZywgcHJldHR5IGJhc2ljIGZ1bmN0aW9uXG4gIGZ1bmN0aW9uIHByaW50RXJyb3JNZXNzYWdlcyhlcnJvciwgdmlldykge1xuICAgIHZhciBlcnJvclRleHQgPSBlcnJvck1lc3NhZ2VzWycnKyBlcnJvcl07XG4gICAgJCgnLmVycm9yLW1lc3NhZ2UnKyB2aWV3KS50ZXh0KGVycm9yVGV4dCkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpOyBjb25zb2xlLmxvZygneWVzIScpOyAgICBcbiAgfVxuICBcbiAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7XG4gICAgJCgnLmVycm9yLW1lc3NhZ2UxJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICQoJy5lcnJvci1tZXNzYWdlMicpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgfVxuICBcbiAgLy8gY2hhbmdlcyB0aGUgdGl0bGUgdGV4dFxuICBmdW5jdGlvbiBjaGFuZ2VUaXRsZSh0eXBlKSB7XG4gICAgdmFyICR0aXRsZSA9ICQoJy50eXBlLXRpdGxlJyk7XG4gICAgJHRpdGxlLmh0bWwodHlwZSk7XG4gIH1cbiAgXG5cdFxuICBcbiAgLyogQXBwIENvcmUgRnVuY3Rpb24gRmxvdyBcbiAgIyBcbiAgKi9cbiAgICBcblx0ZnVuY3Rpb24gYXBwSW5pdCgpIHtcbiAgICBtb2JpbGVOYXYoKTtcbiAgICBjb2xvclNlbGVjdG9yKCk7XG4gICAgaW5pdGlhbFJlbmRlcigpO1xuICAgIGV2ZW50QmluZGluZ3MoKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW5pdGlhbFJlbmRlcigpIHtcblx0XHRuZXdDaGFydCA9IG5ldyBDaGFydChjdHgpLkxpbmUodGVtcGxhdGVEYXRhLCB0ZW1wbGF0ZU9wdGlvbnMpO1xuXHR9XG4gICAgXG4gIGZ1bmN0aW9uIGV2ZW50QmluZGluZ3MoKSB7XG4gICAgLy9iaW5kcyBldmVudCBoYW5kbGVycywgbWFpbmx5IHRoZSBzdWJtaXQgYnV0dG9uLlxuICAgICRzdWJtaXREYXRhLm9uKCdjbGljaycsIHJlbmRlck9uU3VibWl0KTtcbiAgICAkKCcjc3VibWl0LWRhdGEyJykub24oJ2NsaWNrJywgcmVuZGVyT25TdWJtaXQpO1xuICAgIFxuICAgIC8vYWRkIGRzLCByZW1vdmUgZHMgZXZlbnRzXG4gICAgJGFkZERhdGFCdG4ub24oJ2NsaWNrJywgYWRkRGF0YVNldCk7XG4gICAgJHJtRGF0YUJ0bi5vbignY2xpY2snLCByZW1vdmVEYXRhU2V0KTtcbiAgICBcbiAgICAvL2NoYXJ0dHlwZSBzd2l0Y2ggZXZlbnQgYmluZGluZ3NcbiAgICAkKCdzcGFuLmNoYXJ0LXR5cGUnKS5vbignY2xpY2snLCBjaGFydFR5cGVDb250cm9sbGVyKTtcbiAgICAkKCdzZWxlY3QjbW9iaWxlLW5hdicpLm9uKCdjaGFuZ2UnLCBtb2JpbGVDaGFydEN0cmwpO1xuICAgIFxuICAgIC8vY2hhcnR5cGUyIGFkZCByZW1vdmUgYmluZGluZ1xuICAgICQoJyNhZGQtc2xpY2UnKS5vbignY2xpY2snLCBhZGRTbGljZSk7XG4gICAgJCgnI3JtLXNsaWNlJykub24oJ2NsaWNrJywgcmVtb3ZlU2xpY2UpO1xuICAgIFxuICB9XG4gIFxuICAvLyBNYWtlcyB0aGUgc2VsZWN0IG1vYmlsZSBuYXZpZ2F0aW9uIGFuZCBhcHBlbmRzIHRvIHRoZSBwYWdlXG4gIGZ1bmN0aW9uIG1vYmlsZU5hdigpIHtcbiAgICBcbiAgICAkKCc8c2VsZWN0IC8+Jywge1xuICAgICAgXCJpZFwiOiBcIm1vYmlsZS1uYXZcIlxuICAgIH0pLnByZXBlbmRUbygnI3R5cGUtc2VsZWN0Jyk7XG4gICAgXG4gICAgJCgnc3Bhbi5jaGFydC10eXBlIGEnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRlbCA9ICQodGhpcyk7XG4gICAgICAkKCc8b3B0aW9uIC8+Jywge1xuICAgICAgICBcInZhbHVlXCI6ICRlbC5hdHRyKFwiaHJlZlwiKSxcbiAgICAgICAgXCJ0ZXh0XCIgOiAkZWwudGV4dCgpXG4gICAgICB9KS5hcHBlbmRUbygnI3R5cGUtc2VsZWN0IHNlbGVjdCcpO1xuICAgIH0pO1xuICB9XG4gIFxuICAvKlxuICAqIGZuIHRvIGNoYW5nZWQgdGhlIHZpZXcgZGVwZW5kaW5nIG9uIHdoYXQgY2hhcnQgdHlwZSBpcyBwaWNrZWRcbiAgKi9cbiAgZnVuY3Rpb24gY2hhcnRUeXBlQ29udHJvbGxlcihlLCBtdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBcbiAgICB2YXIgJGVsID0gJCh0aGlzKTtcbiAgICB2YXIgd2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICBpZiAoIHdpbmRvd1dpZHRoID4gNjAwICkge1xuICAgICAgY29uc29sZS5sb2coJHdpbmRvdy53aWR0aCgpKTtcbiAgICAgIHZhciAkY2hhcnRUeXBlQ2xpY2tlZCA9ICRlbC5hdHRyKCdkYXRhLXR5cGUnKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBcbiAgLy8gSW5wdXQgbGFiZWxzIGNvbnRyb2xsZXJcbiAgICBpZiAoJGNoYXJ0VHlwZUNsaWNrZWQgPT09ICdsaW5lJyAgfHxcbiAgICAgICAgJGNoYXJ0VHlwZUNsaWNrZWQgPT09ICdiYXInICAgfHxcbiAgICAgICAgJGNoYXJ0VHlwZUNsaWNrZWQgPT09ICdyYWRhcicgfHxcbiAgICAgICAgbXQgPT09ICdMaW5lJyB8fFxuICAgICAgICBtdCA9PT0gJ0JhcicgIHx8XG4gICAgICAgIG10ID09PSAnUmFkYXInIClcbiAgICB7XG4gICAgICAkdmlldzIuYWRkQ2xhc3MoJ3R5cGUtaGlkZGVuJyk7XG4gICAgICAkdmlldzEucmVtb3ZlQ2xhc3MoJ3R5cGUtaGlkZGVuJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJHZpZXcyLnJlbW92ZUNsYXNzKCd0eXBlLWhpZGRlbicpO1xuICAgICAgJHZpZXcxLmFkZENsYXNzKCd0eXBlLWhpZGRlbicpO1xuICAgICAgLy8gUmVtb3ZlcyBhbGwgYWRkZWQgZGF0YXNldHMgb24gY2hhcnQgdmlldyBjaGFuZ2VzXG4gICAgICB2YXIgbnVtU2V0c0FkZGVkID0gdGVtcGxhdGVEYXRhLmRhdGFzZXRzLmxlbmd0aCAtIDI7ICAgIFxuICAgICAgZm9yICh2YXIgaSA9IG51bVNldHNBZGRlZDsgaSA+IDA7IC0taSkge1xuICAgICAgICByZW1vdmVEYXRhU2V0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vY2xlYXIgdGhlIG9wdGlvbnMgbW9kdWxlXG4gICAgJCgnZGl2I3N3aXRjaC1vcHRpb25zJykuZW1wdHkoKTtcbiAgICBcbiAgICAvL2NoYW5nZSB0aGUgb3B0aW9uIHBhbmVsIHZpZXcuLi5cbiAgICBpZiAoJGNoYXJ0VHlwZUNsaWNrZWQgPT09ICdsaW5lJyB8fCBtdCA9PT0gJ0xpbmUnKSB7XG4gICAgICBjaGFuZ2VUaXRsZSgnTGluZSBHcmFwaCcpO1xuICAgICAgXG4gICAgICBvcHRpb25zQXJyID0gW1xuICAgICAgICB7b3B0aW9uTmFtZTogJ3NjYWxlU2hvd0dyaWRMaW5lcycsIG9wdGlvblRleHQ6ICdncmlkbGluZXMnLCBjaGVja2VkOiB0cnVlfSxcbiAgICAgICAge29wdGlvbk5hbWU6ICdiZXppZXJDdXJ2ZScsIG9wdGlvblRleHQ6ICdiZXppZXIgY3VydmVzJywgY2hlY2tlZDogdHJ1ZX0sXG4gICAgICAgIHtvcHRpb25OYW1lOiAnZGF0YXNldEZpbGwnLCBvcHRpb25UZXh0OiAnY29sb3IgZmlsbCcsIGNoZWNrZWQ6IHRydWV9LFxuICAgICAgICB7b3B0aW9uTmFtZTogJ3BvaW50RG90Jywgb3B0aW9uVGV4dDogJ2dyaWQgZG90cycsIGNoZWNrZWQ6IHRydWV9XG4gICAgICBdO1xuICAgICAgd3JpdGVPcHRpb25zKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCRjaGFydFR5cGVDbGlja2VkID09PSAnYmFyJyB8fCBtdCA9PT0gJ0JhcicpIHtcbiAgICAgIGNoYW5nZVRpdGxlKCdCYXIgR3JhcGgnKTtcblxuICAgICAgb3B0aW9uc0FyciA9IFtcbiAgICAgICAge29wdGlvbk5hbWU6ICdzY2FsZVNob3dHcmlkTGluZXMnLCBvcHRpb25UZXh0OiAnZ3JpZGxpbmVzJywgY2hlY2tlZDogdHJ1ZX0sXG4gICAgICAgIHtvcHRpb25OYW1lOiAnc2NhbGVCZWdpbkF0WmVybycsIG9wdGlvblRleHQ6ICdzY2FsZSB6ZXJvJywgY2hlY2tlZDogdHJ1ZX1cbiAgICAgIF07XG4gICAgICB3cml0ZU9wdGlvbnMoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoJGNoYXJ0VHlwZUNsaWNrZWQgPT09ICdyYWRhcicgfHwgbXQgPT09ICdSYWRhcicpIHtcbiAgICAgIGNoYW5nZVRpdGxlKCdSYWRhciBHcmFwaCcpO1xuICAgICAgXG4gICAgICBvcHRpb25zQXJyID0gW1xuICAgICAgICB7b3B0aW9uTmFtZTogJ3NjYWxlU2hvd0xpbmUnLCBvcHRpb25UZXh0OiAnc2NhbGUgbGluZXMnLCBjaGVja2VkOiB0cnVlfSxcbiAgICAgICAge29wdGlvbk5hbWU6ICdhbmdsZVNob3dMaW5lT3V0Jywgb3B0aW9uVGV4dDogJ2FuZ2xlIGxpbmVzJywgY2hlY2tlZDogdHJ1ZX0sXG4gICAgICAgIHtvcHRpb25OYW1lOiAnc2NhbGVTaG93TGFiZWxzJywgb3B0aW9uVGV4dDogJ3NjYWxlIGxhYmVscycsIGNoZWNrZWQ6IHRydWV9LFxuICAgICAgICB7b3B0aW9uTmFtZTogJ3BvaW50RG90Jywgb3B0aW9uVGV4dDogJ2RvdCBwb2ludHMnLCBjaGVja2VkOiB0cnVlfSxcbiAgICAgICAge29wdGlvbk5hbWU6ICdkYXRhc2V0U3Ryb2tlJywgb3B0aW9uVGV4dDogJ2RhdGFzZXQgc3Ryb2tlcycsIGNoZWNrZWQ6IHRydWV9LFxuICAgICAgICB7b3B0aW9uTmFtZTogJ2RhdGFzZXRGaWxsJywgb3B0aW9uVGV4dDogJ2RhdGFzZXQgZmlsbCcsIGNoZWNrZWQ6IHRydWV9XG4gICAgICBdO1xuICAgICAgd3JpdGVPcHRpb25zKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCRjaGFydFR5cGVDbGlja2VkID09PSBcInBpZVwiIHx8IG10ID09PSBcIlBpZVwiIHx8XG4gICAgICAgICAgICAgICRjaGFydFR5cGVDbGlja2VkID09PSBcImRvbnV0XCIgfHwgbXQgPT09IFwiRG91Z2hudXRcIilcbiAgICB7XG4gICAgICBpZiAoJGNoYXJ0VHlwZUNsaWNrZWQgPT09IFwicGllXCIgfHwgbXQgPT09IFwiUGllXCIpIHtcbiAgICAgICAgY2hhbmdlVGl0bGUoJ1BpZSBHcmFwaCcpO1xuICAgICAgfVxuICAgICAgaWYgKCRjaGFydFR5cGVDbGlja2VkID09PSBcImRvbnV0XCIgfHwgbXQgPT09IFwiRG91Z2hudXRcIikgeyBjaGFuZ2VUaXRsZSgnRG91Z2hudXQgR3JhcGgnKTsgfVxuICAgICAgXG4gICAgICBvcHRpb25zQXJyID0gW1xuICAgICAgICB7b3B0aW9uTmFtZTogJ3NlZ21lbnRTaG93U3Ryb2tlJywgb3B0aW9uVGV4dDogJ3NlZ21lbnQgc3Ryb2tlJywgY2hlY2tlZDogdHJ1ZX0sXG4gICAgICAgIHtvcHRpb25OYW1lOiAnYW5pbWF0ZVJvdGF0ZScsIG9wdGlvblRleHQ6ICdhbmltYXRlIHJvdGF0ZScsIGNoZWNrZWQ6IGZhbHNlfSxcbiAgICAgICAge29wdGlvbk5hbWU6ICdhbmltYXRlU2NhbGUnLCBvcHRpb25UZXh0OiAnYW5pbWF0ZSBzY2FsZScsIGNoZWNrZWQ6IGZhbHNlfVxuICAgICAgXTtcbiAgICAgIHdyaXRlT3B0aW9ucygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNoYW5nZVRpdGxlKCdQb2xhciBHcmFwaCcpO1xuICAgICAgXG4gICAgICBvcHRpb25zQXJyID0gW1xuICAgICAgICB7b3B0aW9uTmFtZTogJ3NjYWxlU2hvd0xhYmVsQmFja2Ryb3AnLCBvcHRpb25UZXh0OiAnc2NhbGUgYmFja2Ryb3AnLCBjaGVja2VkOiB0cnVlfSxcbiAgICAgICAge29wdGlvbk5hbWU6ICdzY2FsZUJlZ2luQXRaZXJvJywgb3B0aW9uVGV4dDogJ3NjYWxlIHplcm8nLCBjaGVja2VkOiB0cnVlfSxcbiAgICAgICAge29wdGlvbk5hbWU6ICdzY2FsZVNob3dMaW5lJywgb3B0aW9uVGV4dDogJ3NjYWxlIGxpbmUnLCBjaGVja2VkOiB0cnVlfSxcbiAgICAgICAge29wdGlvbk5hbWU6ICdzZWdtZW50U2hvd1N0cm9rZScsIG9wdGlvblRleHQ6ICdzZWdtZW50IHN0cm9rZScsIGNoZWNrZWQ6IHRydWV9LFxuICAgICAgICB7b3B0aW9uTmFtZTogJ2FuaW1hdGVSb3RhdGUnLCBvcHRpb25UZXh0OiAnYW5pbWF0ZSByb3RhdGUnLCBjaGVja2VkOiBmYWxzZX0sXG4gICAgICAgIHtvcHRpb25OYW1lOiAnYW5pbWF0ZVNjYWxlJywgb3B0aW9uVGV4dDogJ2FuaW1hdGUgc2NhbGUnLCBjaGVja2VkOiBmYWxzZX1cbiAgICAgIF07XG4gICAgICB3cml0ZU9wdGlvbnMoKTtcbiAgICB9XG4gICAgXG4gICAgLy8gc2V0cyB0aGUgY2hhcnQgdHlwZSB0aGUgY29ycmVjdCBvbmVcbiAgICBpZiAoJGNoYXJ0VHlwZUNsaWNrZWQgPT09IFwicG9sYXJcIiB8fCBtdCA9PT0gXCJQb2xhclwiKSB7XG4gICAgICBncmFwaHR5cGUgPSBcIlBvbGFyQXJlYVwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGdyYXBodHlwZSA9ICRlbC50ZXh0KCkudG9TdHJpbmcoKSB8fCBtdDtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZygnY3VycmVudCBncmFwaCB0eXBlIGlzICcrIGdyYXBodHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBtb2JpbGVDaGFydEN0cmwoKSB7XG4gICAgdmFyIG1vYmlsZVR5cGUgPSAkKCdzZWxlY3Qgb3B0aW9uOnNlbGVjdGVkJykudGV4dCgpO1xuICAgIGNoYXJ0VHlwZUNvbnRyb2xsZXIobW9iaWxlVHlwZSk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHdyaXRlT3B0aW9ucygpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnNBcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICQoJzxpbnB1dD48L2lucHV0PicpLmF0dHIoe1xuICAgICAgICAnY2xhc3MnOiAnc3dpdGNoJyxcbiAgICAgICAgJ2lkJyAgIDogb3B0aW9uc0FycltpXS5vcHRpb25OYW1lLFxuICAgICAgICAndHlwZScgOiAnY2hlY2tib3gnXG4gICAgICB9KS5wcm9wKCdjaGVja2VkJywgb3B0aW9uc0FycltpXS5jaGVja2VkKS5hcHBlbmRUbygkb3B0aW9uc0NvbnRhaW5lcik7XG4gICAgICAkKCc8bGFiZWw+PC9sYWJlbD4nKS5hdHRyKHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInN3aXRjaFwiLFxuICAgICAgICBcImZvclwiICA6IG9wdGlvbnNBcnJbaV0ub3B0aW9uTmFtZSxcbiAgICAgIH0pLnRleHQob3B0aW9uc0FycltpXS5vcHRpb25UZXh0KS5hcHBlbmRUbygkb3B0aW9uc0NvbnRhaW5lcik7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBjb2xvclNlbGVjdG9yKCkge1xuICBcdCQoXCIuY29sb3Itc2VsZWN0XCIpLnNwZWN0cnVtKHtcbiAgXHQgICAgc2hvd1BhbGV0dGVPbmx5OiB0cnVlLFxuICBcdCAgICBzaG93UGFsZXR0ZTp0cnVlLFxuICBcdCAgICBjb2xvcjoncmdiYSgyNTUsIDI1NSwgMjU1LCAuNSknLFxuICBcdCAgICBwYWxldHRlOiBbXG4gIFx0ICAgICAgICBbJ3JnYmEoNTcsIDEwNiwgMTc3LCAxKScsIFxuICAgICAgICAgICAgJ3JnYmEoMjE4LCAxMjQsIDQ4LCAxKScsIFxuICAgICAgICAgICAgJ3JnYmEoNjIsIDE1MCwgODEsIDEpJyxcbiAgXHQgICAgICAgICdyZ2JhKDIwNCwgMzcsIDQxLCAxKScsIFxuICAgICAgICAgICAgJ3JnYmEoODMsIDgxLCA4NCwgMSknLCBcbiAgICAgICAgICAgICdyZ2JhKDEwNywgNzYsIDE1NCwgMSknLCBcbiAgICAgICAgICAgICdyZ2JhKDE0NiwgMzYsIDQwLCAxKScsIFxuICAgICAgICAgICAgJ3JnYmEoMTQ4LCAxMzksIDYxLCAxKSddLFxuICAgICAgICAgIFxuICAgICAgICAgIFsncmdiYSgxMDIsMTk0LDE2NSwgMSknLFxuICAgICAgICAgICdyZ2JhKDI1MiwxNDEsOTgsIDEpJyxcbiAgICAgICAgICAncmdiYSgxNDEsMTYwLDIwMywgMSknLFxuICAgICAgICAgICdyZ2JhKDIzMSwxMzgsMTk1LCAxKScsXG4gICAgICAgICAgJ3JnYigxNjYsMjE2LDg0LCAxKScsXG4gICAgICAgICAgJ3JnYmEoMjU1LDIxNyw0NywgMSknLCBcbiAgICAgICAgICAncmdiYSgyMjksMTk2LDE0OCwgMSknLFxuICAgICAgICAgICdyZ2JhKDE3OSwxNzksMTc5LCAxKSddXG4gIFx0ICAgIF1cbiAgXHR9KTtcbiAgICAgICQoJy5jb2xvci1zZWxlY3QnKS5yZW1vdmVDbGFzcygnY29sb3Itc2VsZWN0JykuYWRkQ2xhc3MoJ2NvbG9yLWluaXRpYWxpemUnKTtcbiAgfVxuICBcblx0ZnVuY3Rpb24gcmVuZGVyT25TdWJtaXQoKSB7XG4gICAgLy9hdHRlbXB0cyB0byBjbGVhciB0aGUgY2FudmFzIGFzIHRoZXJlIGFyZSBtYW55IGdsaXRjaGVzIG9uIHJlcGVhdGVkIHJlbmRlcmluZ1xuICBcdGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgaWYgKG5ld0NoYXJ0KSB7XG4gICAgbmV3Q2hhcnQuY2xlYXIoKS5kZXN0cm95KCk7XG4gICAgfVxuICAgIFxuICAgIC8vY2xlYXIgZXJyb3IgbWVzc2FnZXMgZnJvbSBwcmV2aW91cyByb3VuZHNcbiAgICBjbGVhckVycm9ycygpO1xuICAgIFxuICAgIC8vcHJlcGFyZSBhdXRvIGxhYmVscyBpZiB0aGUgZmllbGQgaXMgZW1wdHlcbiAgICBwcmVwQXV0b0xhYmVscygpO1xuICAgICAgIFxuICAgIC8vc2V0IHRoZSBjaGFydCBkYXRhIHRvIG5ldyB2YWx1ZXMgYW5kIHJlLXJlbmRlcnMgdGhlIGNhbnZhc1xuICAgIC8vc2V0Q2hhcnREYXRhKCk7XG4gICAgZ3JhcGh0eXBlID09PSBcIkxpbmVcInx8XG4gICAgZ3JhcGh0eXBlID09PSBcIkJhclwifHxcbiAgICBncmFwaHR5cGUgPT09IFwiUmFkYXJcIiA/IHNldENoYXJ0RGF0YSgpIDogc2V0Q2hhcnREYXRhMigpO1xuICAgIFxuICAgIGlmIChncmFwaHR5cGUgPT09IFwiTGluZVwiIHx8IFwiQmFyXCIgfHwgXCJSYWRhclwiKSB7XG4gICAgICAvL25ld0NoYXJ0LmNsZWFyKCkuZGVzdHJveSgpO1xuXHRcdCAgbmV3Q2hhcnQgPSBuZXcgQ2hhcnQoY3R4KVtncmFwaHR5cGVdKCB0ZW1wbGF0ZURhdGEsIHRlbXBsYXRlT3B0aW9ucyApO1xuICAgIH1cbiAgICBpZiAoZ3JhcGh0eXBlID09PSBcIlBpZVwiIHx8IFwiRG9udXRcIiB8fCBcIlBvbGFyQXJlYVwiKSB7XG4gICAgICAvL25ld0NoYXJ0LmNsZWFyKCkuZGVzdHJveSgpO1xuXHRcdCAgbmV3Q2hhcnQgPSBuZXcgQ2hhcnQoY3R4KVtncmFwaHR5cGVdKCB0ZW1wbGF0ZURhdGEyLCB0ZW1wbGF0ZU9wdGlvbnMgKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIFNldHMgdGhlIG1haW4gZGF0YSB2YWx1ZXMgZm9yIHJlbmRlck9uU3VibWl0XG5cdGZ1bmN0aW9uIHNldENoYXJ0RGF0YSgpIHtcbiAgICAvKiBBY3Rpb24gUGxhblxuICAgICAqXG4gICAgKi8gICAgXG4gICAgY29uc29sZS5sb2coJ3NldHRpbmcgY2hhcnQgdHlwZSAxJyk7XG4gICAgLy9zZXRzIHRoZSBjb2xvciBvZiBlYWNoIGRhdGFzZXQgdG8gdGhlIHVzZXIgY2hvc2VuIGNvbG9yXG4gICAgICB2YXIgJHNlbGVjdGVkQ29sb3JzID0gJCgnI3R5cGV2aWV3MSAuY29sb3ItaW5pdGlhbGl6ZScpO1xuICAgICAgXG4gICAgICAkLmVhY2goJHNlbGVjdGVkQ29sb3JzLCBmdW5jdGlvbihpbmRleCwgaXRlbSkge1xuICAgICAgICB2YXIgdHRlbXAgPSBpdGVtLnZhbHVlO1xuICAgICAgLy8gdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGNvbG9yIGlzIG5vdCBzZXRcbiAgICAgICAgaWYgKHR0ZW1wID09PSBcIlwiKSB7XG4gICAgICAgICAgcHJpbnRFcnJvck1lc3NhZ2VzKCdjb2xvcicsIDEpO1xuICAgICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKCdlcnJvciBpbnB1dCcpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgLy8gc2V0cyB0aGUgY29sb3IgZGF0YSBpbiB0aGUgdGVtcGxhdGUgb2JqZWN0XG4gICAgICAgIHRlbXBsYXRlRGF0YS5kYXRhc2V0c1tpbmRleF0uc3Ryb2tlQ29sb3IgPSB0dGVtcDtcbiAgICAgICAgdGVtcGxhdGVEYXRhLmRhdGFzZXRzW2luZGV4XS5wb2ludENvbG9yID0gdHRlbXA7XG4gICAgICAgIHRlbXBsYXRlRGF0YS5kYXRhc2V0c1tpbmRleF0ucG9pbnRIaWdobGlnaHRTdHJva2UgPSB0dGVtcDtcbiAgICAgIC8vIGxpZ2h0ZW5zIHRoZSBjb2xvciBmb3IgdGhlIGZpbGxcbiAgICAgICAgdHRlbXAgPSAncmdiYScrIHR0ZW1wLnNsaWNlKDMsIHR0ZW1wLmxlbmd0aCAtIDEpICsgJywgMC4yKSc7XG4gICAgICAgIHRlbXBsYXRlRGF0YS5kYXRhc2V0c1tpbmRleF0uZmlsbENvbG9yID0gdHRlbXA7XG4gICAgICB9KTtcblxuICAgIC8vIGdyYWJzIHRoZSB1c2VyIGVudGVyZWQgbGFiZWxzIGFuZCBtb2RpZmllcyB0aGUgdGVtcGxhdGVEYXRhIG9iamVjdFxuICAgICAgdmFyIHhsYWJlbHNBcnIgID0gJHhsYWJlbHMudmFsKCkuc3BsaXQoXCIsXCIpO1xuICAgICAgY29uc29sZS5sb2coeGxhYmVsc0Fyci5sZW5ndGgrIFwiIFwiKyBsb25nZXN0QXJyKTtcbiAgICAgIFxuICAgICAgaWYgKCAkeGxhYmVscy52YWwoKSA9PT0gXCJcIiB8fCB4bGFiZWxzQXJyLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnd3JpdGluZyBhdXRvbGFiZWxzIGludG8gZGF0YSBvYmplY3QnKTtcbiAgICAgICAgdGVtcGxhdGVEYXRhLmxhYmVscyA9IGF1dG9MYWJlbHM7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICggeGxhYmVsc0Fyci5sZW5ndGggPCBsb25nZXN0QXJyICYmIHhsYWJlbHNBcnIubGVuZ3RoICE9PSAwICkgeyBcbiAgICAgICAgcHJpbnRFcnJvck1lc3NhZ2VzKCdsYWJlbCcsIDEpO1xuICAgICAgICByZXR1cm47XG4gICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKCdlcnJvcjogbm90IGVub3VnaCBsYWJlbHMnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0ZW1wbGF0ZURhdGEubGFiZWxzID0geGxhYmVsc0FycjsgICAgICAgIFxuICAgICAgfVxuICAgICAgXG4gICAgLy8gZ2V0IHRoZSBkYXRhc2V0IGlucHV0cyBhbmQgbW9kaWZpZXMgdGhlIHRlbXBsYXRlT2JqZWN0IGZvciBlYWNoIHVzZXIgaW5wdXRcbiAgICAgIHZhciBkY0FyciA9ICQoJyNkYXRhc2V0cyAuZm9ybS1jb250cm9sJyk7XG4gICAgICAkLmVhY2goZGNBcnIsIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG4gICAgICAgIHZhciBjdXJJdGVtID0gKGl0ZW0udmFsdWUpLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaXRlbSwgMTApO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vbWFraW5nIHN1cmUgYWxsIGl0ZW1zIGFyZSBudW1lcmljYWw6XG4gICAgICAgIGN1ckl0ZW0uZm9yRWFjaChmdW5jdGlvbihlbCwgaSwgYXJyKSB7XG4gICAgICAgICAgaWYoICEoaXNOdW1iZXIoZWwpKSApIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coaSsgJyBub3QgYSBudW1iZXInKTtcbiAgICAgICAgICAgIHByaW50RXJyb3JNZXNzYWdlcygnd3JvbmcnLCAxKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImlucHV0IGZvcm1hdCBlcnJvciFcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGVtcGxhdGVEYXRhLmRhdGFzZXRzW2luZGV4XS5kYXRhID0gY3VySXRlbTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvL3NldHRpbmcgdXAgdGhlIG9wdGlvbnMgZm9yIGVhY2ggZ3JhcGggdHlwZS5cbiAgICAgIHNldE9wdGlvbnMoKTtcblx0fVxuICBcbiAgZnVuY3Rpb24gc2V0Q2hhcnREYXRhMigpIHtcblxuICAgIGNvbnNvbGUubG9nKCdzZXR0aW5nIGNoYXJ0IHR5cGUgMicpO1xuICAgIFxuICAgIHZhciAkc2xpY2VzID0gJCgnLmRhdGEtc2xpY2VzJyk7XG4gICAgLy92YXIgJGNvbG9ycyA9ICQoJyN0eXBldmlldzEgLmNvbG9yLWluaXRpYWxpemUnKTtcbiAgICBcbiAgICAkLmVhY2goJHNsaWNlcywgZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcbiAgICAgIHZhciBsYWJlbFZhbCA9ICQoaXRlbSkuZmluZCgnLmxhYmVscycpLnZhbCgpO1xuICAgICAgdmFyIGRhdGFWYWwgPSAkKGl0ZW0pLmZpbmQoJy5zbGljZS1kYXRhJykudmFsKCk7XG4gICAgICB2YXIgY29sb3JWYWwgPSAkKGl0ZW0pLmZpbmQoJy5jb2xvci1pbml0aWFsaXplJykudmFsKCkudG9TdHJpbmcoKTtcblxuICAgICAgaWYgKGxhYmVsVmFsID09PSBcIlwiIHx8IGRhdGFWYWwgPT09IFwiXCIpIHtcbiAgICAgICAgcHJpbnRFcnJvck1lc3NhZ2VzKCdlbXB0eScsIDIpO1xuICAgICAgICAvL3Rocm93IG5ldyBFcnJvcignZmllbGRzIGVtcHR5Jyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjb2xvclZhbCA9PT0gXCJcIikge1xuICAgICAgICBwcmludEVycm9yTWVzc2FnZXMoJ2NvbG9yJywgMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdGVtcGxhdGVEYXRhMltpbmRleF0udmFsdWUgPSBwYXJzZUludChkYXRhVmFsKTtcbiAgICAgIHRlbXBsYXRlRGF0YTJbaW5kZXhdLmNvbG9yID0gY29sb3JWYWw7XG4gICAgICB0ZW1wbGF0ZURhdGEyW2luZGV4XS5oaWdobGlnaHQgPSBjb2xvclZhbDtcbiAgICAgIHRlbXBsYXRlRGF0YTJbaW5kZXhdLmxhYmVsID0gbGFiZWxWYWw7XG4gICAgXG4gICAgICAvL2NvbnNvbGUubG9nKHRlbXBsYXRlRGF0YTIpO1xuICAgIH0pO1xuICBcbiAgICBzZXRPcHRpb25zKCk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHNldE9wdGlvbnMoKSB7XG5cbiAgLy9DaGFydHR5cGUgTGluZSBvcHRpb25zXG4gICAgY3VycmVudFBhZ2VPcHRpb25zID0gJCgnW3R5cGU9Y2hlY2tib3hdJyk7XG4gIFxuICAgICQuZWFjaChjdXJyZW50UGFnZU9wdGlvbnMsIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG4gICAgICBjb25zb2xlLmxvZyggaXRlbS5pZCApO1xuICAgICAgdGVtcGxhdGVPcHRpb25zW2l0ZW0uaWRdID0gaXRlbS5jaGVja2VkO1xuICAgICAgY29uc29sZS5sb2coIGl0ZW0uY2hlY2tlZCApO1xuICAgIH0pO1xuICB9XG4gIFxuLy9hZGQgZGF0YSBzbGljZSBmb3IgcGllLCBkb3VnaG51dCwgcG9sYXJcbiAgZnVuY3Rpb24gYWRkU2xpY2UoZXZ0KSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIG5ld1NsaWNlID0ge1xuICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgY29sb3I6XCJcIixcbiAgICAgICAgaGlnaGxpZ2h0OiBcIlwiLFxuICAgICAgICBsYWJlbDogXCJcIlxuICAgIH07XG4gICAgaWYodGVtcGxhdGVEYXRhMi5sZW5ndGggPiAxMikge1xuICAgICAgY29uc29sZS5sb2coJ2xpbWl0IHJlYWNoZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0ZW1wbGF0ZURhdGEyLnB1c2gobmV3U2xpY2UpO1xuICAgICAgY29uc29sZS5sb2codGVtcGxhdGVEYXRhMi5sZW5ndGgpO1xuICAgICAgXG4gICAgICAvL2FkZGluZyB0aGUgaHRtbCBlbGVtZW50cyB0byB0aGUgcGFnZVxuICAgICAgdmFyICRkaXYgPSAkKCc8ZGl2PicsIHtjbGFzczogXCJjb250YWluZXIgZGF0YS1zbGljZXMgY29sLTZcIn0pO1xuICAgICAgdmFyICRpbnB1dExhYmVsID0gJCgnPGlucHV0PicsIHtjbGFzczogXCJsYWJlbHMgY29sLTEwXCIsIHR5cGU6IFwidGV4dFwifSk7XG4gICAgICB2YXIgJGlucHV0RGF0YSA9ICQoJzxpbnB1dD4nLCB7Y2xhc3M6IFwic2xpY2UtZGF0YSBjb2wtMTBcIiwgdHlwZTogXCJudW1iZXJcIn0pO1xuICAgICAgdmFyICRjb2xvciA9ICQoJzxpbnB1dD4nLCB7Y2xhc3M6IFwiY29sb3Itc2VsZWN0IGNvbG9yMlwifSk7XG4gICAgIFxuICAgICAgJGRpdi5hcHBlbmQoJGlucHV0TGFiZWwpLmFwcGVuZCgkaW5wdXREYXRhKS5hcHBlbmQoJGNvbG9yKTtcbiAgICAgICQoJy5kYXRhLXNsaWNlcycpLmxhc3QoKS5hZnRlcigkZGl2KTtcbiAgICAgIGNvbG9yU2VsZWN0b3IoKTtcbiAgICB9XG4gICAgZGF0YUxpbmtzU3R5bGUyKCk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHJlbW92ZVNsaWNlKGV2dCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmKHRlbXBsYXRlRGF0YTIubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRlbXBsYXRlRGF0YTIucG9wKCk7IGNvbnNvbGUubG9nKHRlbXBsYXRlRGF0YTIubGVuZ3RoKTtcbiAgICAgICQoJy5kYXRhLXNsaWNlcycpLmxhc3QoKS5yZW1vdmUoKTtcbiAgICB9XG4gICAgZGF0YUxpbmtzU3R5bGUyKCk7XG4gIH1cbiAgXG4gIFxuICBmdW5jdGlvbiBhZGREYXRhU2V0KGV2dCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBkc0FyciA9IHRlbXBsYXRlRGF0YS5kYXRhc2V0cztcbiAgICB2YXIgbmV3RFMgPSB7XG4gICAgICAgICAgbGFiZWw6ICcnLFxuICAgICAgICAgIGZpbGxDb2xvcjogXCJyZ2JhKDIyMCwyMjAsMjIwLDAuMilcIixcbiAgICAgICAgICBzdHJva2VDb2xvcjogXCJyZ2JhKDIyMCwyMjAsMjIwLDEpXCIsXG4gICAgICAgICAgcG9pbnRDb2xvcjogXCJyZ2JhKDIyMCwyMjAsMjIwLDEpXCIsXG4gICAgICAgICAgcG9pbnRTdHJva2VDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgcG9pbnRIaWdobGlnaHRGaWxsOiBcIiNmZmZcIixcbiAgICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogXCJyZ2JhKDIyMCwyMjAsMjIwLDEpXCIsXG4gICAgICAgICAgZGF0YTogW11cbiAgICB9O1xuICAgIC8vaWYgdGhlIG51bWJlciBvZiBkYXRhc2V0cyBpcyBncmVhdGVyIHRoYW4gZGF0YXNldHNBbGxvd2VkLCBjYW4gbm90IGFkZFxuICAgIGlmKGRzQXJyLmxlbmd0aCA+PSBDb25maWdEZWZhdWx0cy5kYXRhc2V0c0FsbG93ZWQpIHtcbiAgICAgIC8vY29uc29sZS5sb2coJ2RhdGFzZXQgbGltaXQgcmVhY2hlZCwgY2FuIG5vdCBhZGQgYW5vdGhlciBzZXQnKyBkc0Fyci5sZW5ndGgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvL2Vsc2UgYWRkIGEgbmV3IGRhdGEgb2JqZWN0IGF0IHRoZSBlbmQgb2YgZGF0YXNldHMgb2JqZWN0XG4gICAgZWxzZSB7XG4gICAgICBkc0Fyci5wdXNoKG5ld0RTKTsgICAgICBcbiAgICAgIC8vTm93IGFwcGVuZCB0aGUgaHRtbCBlbGVtZW50IHRvIHRoZSBwYWdlIHRvIGFsbG93IHVzZXIgZW50cnlcbiAgICAgIHZhciAkZGF0YUlucHV0RGl2ID0gJCgnPGRpdj4nLCB7aWQ6XCJcIiwgY2xhc3M6IFwiY29udGFpbmVyIGFmXCJ9KTtcbiAgICAgIHZhciAkZGF0YUlucHV0RWwgPSAkKCc8aW5wdXQgLz4nLCB7aWQ6IFwiXCIsIGNsYXNzOiBcImZvcm0tY29udHJvbCBhZGRlZC1pbnB1dHNcIn0pO1xuICAgICAgdmFyICRkYXRhQ29sb3JTZWxlY3QgPSAkKCc8aW5wdXQ+Jywge2NsYXNzOiBcImNvbG9yLXNlbGVjdCBjb2xvcjFcIn0pO1xuICAgICAgXG4gICAgICAkZGF0YUlucHV0RGl2LmFwcGVuZCgkZGF0YUlucHV0RWwpLmFwcGVuZCgkZGF0YUNvbG9yU2VsZWN0KTtcbiAgICAgICRkYXRhc2V0cy5hcHBlbmQoJGRhdGFJbnB1dERpdik7XG4gICAgICBjb2xvclNlbGVjdG9yKCk7XG4gICAgfVxuICAgIGRhdGFMaW5rc1N0eWxlKCk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHJlbW92ZURhdGFTZXQoZXZ0KSB7XG4gICAgaWYgKGV2dCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHZhciBkc0FyciA9IHRlbXBsYXRlRGF0YS5kYXRhc2V0cztcbiAgICBcbiAgICBpZihkc0Fyci5sZW5ndGggPD0gMikge1xuICAgICAgLy9jb25zb2xlLmxvZygnbXVzdCBoYXZlIGF0IGxlYXN0IHR3byBkYXRhc2V0cycrIGRzQXJyLmxlbmd0aCk7ICAgICAgXG4gICAgICByZXR1cm47XG4gICAgfSBcbiAgICBlbHNlIHtcbiAgICAgIGRzQXJyLnBvcCgpO1xuICAgICAgLy9SZW1vdmUgdGhlIGh0bWwgaW5wdXQgZWxlbWVudFxuICAgICAgdmFyICRsYXN0RGF0YUlucHV0cyA9ICQoJyNkYXRhc2V0cyBkaXYuY29udGFpbmVyJykubGFzdCgpO1xuICAgICAgJGxhc3REYXRhSW5wdXRzLnJlbW92ZSgpO1xuICAgIH1cbiAgICBkYXRhTGlua3NTdHlsZSgpO1xuICB9XG4gIFxuICAvL3RvZ2dsZXMgaGlkZSBhbmQgc2hvdyBvZiBybSwgYWRkIGxpbmtzIGFjY29yZGluZ2x5XG4gIGZ1bmN0aW9uIGRhdGFMaW5rc1N0eWxlKCkge1xuICAgIHZhciB0ZW1wcCA9IHRlbXBsYXRlRGF0YS5kYXRhc2V0cztcbiAgICAvLzMsIDQsIDUsIDYgYm90aCBzaG93XG4gICAgaWYodGVtcHAubGVuZ3RoID4gMiAmJiB0ZW1wcC5sZW5ndGggPCA5KSB7IFxuICAgICAgJHJtRGF0YUJ0bi5yZW1vdmVDbGFzcygnaGlkZGVuJyk7IFxuICAgICAgJGFkZERhdGFCdG4ucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgIH1cbiAgICBpZih0ZW1wcC5sZW5ndGggPT09IDIpIHsgJHJtRGF0YUJ0bi5hZGRDbGFzcygnaGlkZGVuJyk7IH1cbiAgICBpZih0ZW1wcC5sZW5ndGggPT09IDkpIHsgJGFkZERhdGFCdG4uYWRkQ2xhc3MoJ2hpZGRlbicpOyB9ICBcbiAgfVxuICBcbiAgZnVuY3Rpb24gZGF0YUxpbmtzU3R5bGUyKCkge1xuICAgIHZhciAkcm1TbGljZSA9ICQoJyNybS1zbGljZScpLFxuICAgICAgICAkYWRkU2xpY2UgPSAkKCcjYWRkLXNsaWNlJyk7XG4gICAgXG4gICAgdmFyIHRlbXBwID0gdGVtcGxhdGVEYXRhMjtcbiAgICAvLyBmcm9tIDIgLSAxMiwgYm90aCBzaG93XG4gICAgaWYodGVtcHAubGVuZ3RoID4gMiAmJiB0ZW1wcC5sZW5ndGggPCAxMykgeyBcbiAgICAgICRybVNsaWNlLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTsgXG4gICAgICAkYWRkU2xpY2UucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgIH1cbiAgICBpZih0ZW1wcC5sZW5ndGggPT09IDIpIHsgJHJtU2xpY2UuYWRkQ2xhc3MoJ2hpZGRlbicpOyB9XG4gICAgaWYodGVtcHAubGVuZ3RoID09PSAxMikgeyAkYWRkU2xpY2UuYWRkQ2xhc3MoJ2hpZGRlbicpOyB9ICBcbiAgfVxuICBcbiAgLy8gQ29udmVydHMgY2FudmFzIHRvIGFuIGltYWdlXG4gIGZ1bmN0aW9uIGNhbnZhc1RvSW1hZ2UoKSB7XG4gICAgICB2YXIgZ3JhcGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2VuZXJhdGVkLWNoYXJ0Jyk7XG4gICAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlLnNyYyA9IGdyYXBoLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcbiAgICAgIFxuICAgICAgdmFyICRkb3dubG9hZCA9ICQoJzxhIGRvd25sb2FkPVwic2ltcGxlY2hhcnQucG5nXCI+PC9hPicpO1xuICAgICAgJGRvd25sb2FkLmF0dHIoJ2hyZWYnLCBpbWFnZS5zcmMpO1xuICAgICAgJGRvd25sb2FkLmFwcGVuZChpbWFnZSk7XG5cbiAgICAgICQoJyNncmFwaC1vdXRwdXQnKS5lbXB0eSgpLmFwcGVuZCgkZG93bmxvYWQpO1xuICB9XG4gIFxuXHQvL0luaXRpYXRlcyB0aGUgaW5pdGlhbCBpbnN0YW5jZSBvZiB0aGUgYXBwbGljYXRpb24sIGV2ZW50IGJpbmRpbmdzLCBlY3QuLlxuXHRhcHBJbml0KCk7XG4gIFxuXHRyZXR1cm4ge1xuXHRcdC8vIEFueSBtZXRob2RzIHRvIGJlIHJldHVybmVkIGZvciBwdWJsaWMgY29uc3VtcHRpb24gYnkgb3RoZXIgcGFydHMgb2YgdGhlIEFwcFxuXG5cdH07XG5cdFxufSkoKTtcblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
